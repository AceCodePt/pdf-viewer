function t(){let t,e;return{promise:new Promise(((n,i)=>{t=n,e=i})),resolve:t,reject:e}}const e=document.createElement("template");e.innerHTML="\n  <style>\n    :host {\n      display: block;\n    }\n    canvas {\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n  <canvas />\n",(async()=>{window.pdfjsLib||await import("https://cdn.jsdelivr.net/npm/pdfjs-dist/+esm");class n extends HTMLElement{static elementName="pdf-viewer";static observedAttributes=["url","page"];_canvas;_pdfDocument;rendering=!1;constructor(){super(),window.pdfjsLib.GlobalWorkerOptions.workerSrc=`https://cdn.jsdelivr.net/npm/pdfjs-dist@${window.pdfjsLib.version}/build/pdf.worker.min.mjs`,this._pdfDocument=t();const n=this.attachShadow({mode:"closed"});n.appendChild(e.content.cloneNode(!0)),this._canvas=this.initializeCanvas(n)}initializeCanvas(t){const e=t.querySelector("canvas");if(!e)throw new Error("Couldn't find the canvas on the template");return e}get url(){const t=this.getAttribute("url");if(!t)throw new Error("url doesn't exist on the component");return t}set url(t){this.setAttribute("url",t)}get page(){const t=this.getAttribute("page");if(!t)throw new Error("page doesn't exist on the component");const e=+t;if(isNaN(e)||e<=0)throw new Error("Page isn't a valid number");return e}set page(t){const e=+t;if(isNaN(e)||e<=0)throw new Error("Page isn't a valid number");this.setAttribute("page",e.toString())}attributeChangedCallback(e,n,i){if(n!==i){if("url"===e&&i){this._pdfDocument=t();let e=i;/^http/.test(i)||(e={data:i}),window.pdfjsLib.getDocument(e).promise.then(this._pdfDocument.resolve).catch(this._pdfDocument.reject)}this.rendering||(this.rendering=!0,requestAnimationFrame((()=>{this.renderPage().finally((()=>{this.rendering=!1}))})))}}async renderPage(){const t=await this._pdfDocument.promise;t.numPages<this.page&&(this.page=t.numPages);const e=await t.getPage(this.page);t.numPages;const n=this._canvas.getContext("2d");if(!n)throw new Error("Couldn't find the canvas context");const i=e.getViewport({scale:1}),s=window.devicePixelRatio||1;this._canvas.width=Math.floor(i.width*s),this._canvas.height=Math.floor(i.height*s);const r={canvasContext:n,transform:[s,0,0,s,0,0],viewport:i};e.render(r)}}customElements.define(n.elementName,n)})();
